---
description: 在Mac上打包.NET Windows桌面应用程序的完整指南和最佳实践
---

# Mac上打包.NET Windows桌面应用程序指南

## 项目概述
本项目是一个C#.NET 8.0 WPF桌面应用程序 - 装甲车辆抗毁伤数字化评估软件平台，需要在Mac开发环境下打包成Windows可执行程序。

## 核心打包命令

### 1. 基本发布命令
```bash
# 发布为自包含应用程序 (推荐)
dotnet publish src/ArmorVehicleDamageAssessment.UI \
  -c Release \
  -r win-x64 \
  --self-contained true \
  -p:PublishSingleFile=true \
  -p:IncludeNativeLibrariesForSelfExtract=true \
  -o ./publish/win-x64

# 发布为依赖框架的应用程序 (体积更小)
dotnet publish src/ArmorVehicleDamageAssessment.UI \
  -c Release \
  -r win-x64 \
  --self-contained false \
  -o ./publish/win-x64-framework-dependent
```

### 2. 优化发布选项
```bash
# 带代码裁剪的发布 (减小体积)
dotnet publish src/ArmorVehicleDamageAssessment.UI \
  -c Release \
  -r win-x64 \
  --self-contained true \
  -p:PublishSingleFile=true \
  -p:PublishTrimmed=true \
  -p:TrimMode=link \
  -p:IncludeNativeLibrariesForSelfExtract=true \
  -o ./publish/win-x64-trimmed
```

## 项目文件配置优化

### 在 [ArmorVehicleDamageAssessment.UI.csproj](mdc:src/ArmorVehicleDamageAssessment.UI/ArmorVehicleDamageAssessment.UI.csproj) 中添加发布配置：

```xml
<PropertyGroup Condition="'$(Configuration)' == 'Release'">
  <!-- 发布优化 -->
  <DebugType>none</DebugType>
  <DebugSymbols>false</DebugSymbols>
  <Optimize>true</Optimize>
  
  <!-- 单文件发布配置 -->
  <PublishSingleFile>true</PublishSingleFile>
  <SelfContained>true</SelfContained>
  <RuntimeIdentifier>win-x64</RuntimeIdentifier>
  <IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>
  
  <!-- 代码裁剪配置 -->
  <PublishTrimmed>true</PublishTrimmed>
  <TrimMode>link</TrimMode>
  
  <!-- 程序集元数据 -->
  <ApplicationIcon>Resources\icon.ico</ApplicationIcon>
  <Win32Resource>Resources\app.res</Win32Resource>
</PropertyGroup>
```

## 支持的运行时标识符 (RID)

```bash
# Windows平台
win-x64        # Windows 64位 (推荐)
win-x86        # Windows 32位
win-arm64      # Windows ARM64

# 其他平台 (如需要)
linux-x64      # Linux 64位
osx-x64        # macOS Intel
osx-arm64      # macOS Apple Silicon
```

## 创建安装程序

### 1. 使用 Wix Toolset (推荐)
```bash
# 安装 Wix 扩展
dotnet add package WixSharp

# 或者使用传统的 WiX Toolset v3/v4
# 需要在Windows环境或虚拟机中运行
```

### 2. 使用 Inno Setup
```bash
# 创建 Inno Setup 脚本文件
# 需要在Windows环境中运行 Inno Setup Compiler
```

### 3. 使用 NSIS (Nullsoft Scriptable Install System)
```bash
# 跨平台解决方案，可以在Mac上使用
brew install makensis

# 创建 .nsi 脚本文件
```

## 发布前检查清单

### 1. 项目配置检查
- [ ] 检查 [appsettings.json](mdc:src/ArmorVehicleDamageAssessment.UI/appsettings.json) 配置
- [ ] 验证 [NLog.config](mdc:src/ArmorVehicleDamageAssessment.UI/NLog.config) 日志配置
- [ ] 确认数据库连接字符串适用于部署环境
- [ ] 检查所有资源文件路径

### 2. 依赖项检查
```bash
# 检查项目依赖
dotnet list src/ArmorVehicleDamageAssessment.UI package

# 确认所有NuGet包兼容目标平台
dotnet restore src/ArmorVehicleDamageAssessment.UI
```

### 3. 构建验证
```bash
# 在发布前进行完整构建测试
dotnet build src/ArmorVehicleDamageAssessment.UI -c Release

# 运行测试 (如果存在)
dotnet test
```

## 发布脚本模板

### publish.sh (Mac/Linux)
```bash
#!/bin/bash
set -e

echo "🚀 开始发布装甲车辆抗毁伤数字化评估软件平台..."

# 清理之前的发布
rm -rf ./publish

# 创建发布目录
mkdir -p ./publish

# 发布Windows x64版本
echo "📦 正在发布 Windows x64 版本..."
dotnet publish src/ArmorVehicleDamageAssessment.UI \
  -c Release \
  -r win-x64 \
  --self-contained true \
  -p:PublishSingleFile=true \
  -p:IncludeNativeLibrariesForSelfExtract=true \
  -o ./publish/win-x64

# 复制数据库文件
cp database/init.sql ./publish/win-x64/

# 创建压缩包
cd ./publish
zip -r ArmorVehicleDamageAssessment-win-x64-v1.0.0.zip win-x64/
cd ..

echo "✅ 发布完成！"
echo "📁 发布文件位置: ./publish/"
echo "📦 安装包: ./publish/ArmorVehicleDamageAssessment-win-x64-v1.0.0.zip"
```

### publish.bat (Windows)
```batch
@echo off
echo 🚀 开始发布装甲车辆抗毁伤数字化评估软件平台...

REM 清理之前的发布
if exist publish rmdir /s /q publish

REM 创建发布目录
mkdir publish

REM 发布Windows x64版本
echo 📦 正在发布 Windows x64 版本...
dotnet publish src/ArmorVehicleDamageAssessment.UI ^
  -c Release ^
  -r win-x64 ^
  --self-contained true ^
  -p:PublishSingleFile=true ^
  -p:IncludeNativeLibrariesForSelfExtract=true ^
  -o ./publish/win-x64

REM 复制数据库文件
copy database\init.sql .\publish\win-x64\

echo ✅ 发布完成！
echo 📁 发布文件位置: .\publish\
pause
```

## 常见问题解决

### 1. SQLite 数据库文件打包
```xml
<!-- 在项目文件中确保SQLite文件被包含 -->
<ItemGroup>
  <None Update="ArmorVehicleDatabase.db">
    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
  </None>
</ItemGroup>
```

### 2. WPF资源文件处理
```xml
<!-- 确保图标和资源文件正确打包 -->
<ItemGroup>
  <Resource Include="Resources\**\*" />
  <None Update="icon.ico">
    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
  </None>
</ItemGroup>
```

### 3. 字体文件包含
```xml
<!-- 如果使用自定义字体 -->
<ItemGroup>
  <None Update="Fonts\**\*">
    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
  </None>
</ItemGroup>
```

## 性能优化选项

### 1. ReadyToRun (R2R) 编译
```bash
dotnet publish src/ArmorVehicleDamageAssessment.UI \
  -c Release \
  -r win-x64 \
  --self-contained true \
  -p:PublishReadyToRun=true \
  -o ./publish/win-x64-r2r
```

### 2. 代码裁剪配置
```xml
<PropertyGroup>
  <PublishTrimmed>true</PublishTrimmed>
  <TrimMode>link</TrimMode>
  <SuppressTrimAnalysisWarnings>false</SuppressTrimAnalysisWarnings>
</PropertyGroup>

<!-- 保护不应被裁剪的程序集 -->
<ItemGroup>
  <TrimmerRootAssembly Include="ArmorVehicleDamageAssessment.UI" />
</ItemGroup>
```

## 数字签名 (可选)

### 1. 代码签名证书配置
```xml
<PropertyGroup>
  <SignAssembly>true</SignAssembly>
  <AssemblyOriginatorKeyFile>key.snk</AssemblyOriginatorKeyFile>
</PropertyGroup>
```

### 2. Authenticode签名
```bash
# 使用 signtool (Windows)
signtool sign /f certificate.pfx /p password /t http://timestamp.digicert.com ArmorVehicleDamageAssessment.UI.exe
```

## 部署验证

### 1. 目标机器测试
- [ ] 在纯净的Windows 10/11系统上测试
- [ ] 验证不需要额外安装.NET Runtime
- [ ] 检查所有功能正常工作
- [ ] 验证数据库文件正确创建

### 2. 性能测试
- [ ] 启动时间测试
- [ ] 内存使用情况
- [ ] 文件大小优化

## 自动化CI/CD

### GitHub Actions 示例
```yaml
name: Build and Package

on:
  push:
    tags: ['v*']

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    
    - name: Publish Windows x64
      run: |
        dotnet publish src/ArmorVehicleDamageAssessment.UI \
          -c Release \
          -r win-x64 \
          --self-contained true \
          -p:PublishSingleFile=true \
          -o ./publish/win-x64
    
    - name: Create Release
      uses: actions/upload-artifact@v3
      with:
        name: ArmorVehicleDamageAssessment-win-x64
        path: ./publish/win-x64/
```

## 注意事项

1. **跨平台限制**: WPF应用程序只能在Windows上运行，即使在Mac上编译
2. **测试环境**: 建议在Windows虚拟机中测试最终发布版本
3. **文件路径**: 注意Windows和Unix系统的路径分隔符差异
4. **权限**: 发布的应用程序可能需要管理员权限运行
5. **防病毒软件**: 某些防病毒软件可能误报自包含的.NET应用程序

## 快速发布命令

```bash
# 一键发布命令 (在项目根目录执行)
chmod +x scripts/publish.sh && ./scripts/publish.sh

# 或者直接使用dotnet命令
dotnet publish src/ArmorVehicleDamageAssessment.UI -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o ./dist
```